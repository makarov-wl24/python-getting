# Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение,
# умножение и обычное (не целочисленное) деление клеток, соответственно.
# В методе деления должно осуществляться округление значения до целого числа.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток
# Вычитание. Участвуют две клетки. Необходимо выполнять только если разность количества ячеек двух клеток больше нуля,
# иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества
# ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
class Cell:
    def __init__(self, units):
        self.units = units

    def __str__(self):
        return str(self.units)

    def __add__(self, other):
        return Cell(self.units + other.units)

    def __sub__(self, other):
        if self.units - other.units > 0:
            return Cell(self.units - other.units)
        else:
            return "Результат операции <= 0"

    def __mul__(self, other):
        return Cell(self.units * other.units)

    def __floordiv__(self, other):
        return Cell(self.units // other.units)

    def make_order(self, arg):
        unit = "*"
        new_string = ""
        for _ in range(self.units // arg):
            new_string += unit * arg + "\n"
        new_string += unit * (self.units % arg)

        return new_string


cell1 = Cell(15)
cell2 = Cell(10)
cell3 = Cell(5)

print(cell1.make_order(4))

print(cell1 + cell2)
print(cell1 + cell2 + cell3)

print(cell1 - cell2)
print(cell1 - cell2 - cell3)

print(cell1 * cell2)
print(cell1 * cell2 * cell3)

print(cell1 // cell2)
